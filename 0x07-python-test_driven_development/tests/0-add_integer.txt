>>> add_integer = __import__('0-add_integer').add_integer

successes:
>>> add_integer(44.9, 100.3)
144
>>> add_integer(3, 6)
9
>>> add_integer(5, 3.5)
8

negative ints
>>> add_integer(-3, -5)
-8
>>> add_integer(-100, -1)
-101

negative floats
>>> add_integer(-3.5, -4.5)
-7
>>> add_integer(-2.8, -200.2)
-202

positive and negative ints
>>> add_integer(200, -100)
100
>>> add_integer(-100, 200)
100

positive and negative floats
>>> add_integer(-100.3, 200.4)
100
>>> add_integer(200.1, -100.6)
100

float infinity variables and float NaN(not a number variables)
>>> add_integer(float("Nan"), 100)
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

>>> add_integer(float("Inf"), 100)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(100, float("Nan"))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

>>> add_integer(100, float("Inf"))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

test for module documentation
>>> module_doc = __import__("0-add_integer").__doc__
>>> len(module_doc) > 0
True

test for function documentation
>>> function_doc = add_integer.__doc__
>>> len(function_doc) > 0
True

failures:
passing no arguments
>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

more arguments than the function can take
>>> add_integer(5, 6, 7)
Traceback (most recent call last):
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

using complex numbers
>>> add_integer(5, 2 + 3j)
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(3 + 2j, 3)
Traceback (most recent call last):
TypeError: a must be an integer

using strings instead of numbers
>>> add_integer("hello", 3)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(3, "hello")
Traceback (most recent call last):
TypeError: b must be an integer

using a list instead of numbers
>>> add_integer([4, 5], 5)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(5, [4,5])
Traceback (most recent call last):
TypeError: b must be an integer

using a dict instead of numbers
>>> add_integer({"dog": "joe"}, 8)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(8, {"dog": "joe"})
Traceback (most recent call last):
TypeError: b must be an integer

using None
>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(None, None)
Traceback (most recent call last):
TypeError: a must be an integer

